<?php

namespace App\Domains\Analytics\Entities;

use App\Domains\Analytics\ValueObjects\ReportType;
use App\Domains\Analytics\ValueObjects\ReportStatus;
use Carbon\Carbon;

class AnalyticsReport
{
    private int $id;
    private ReportType $type;
    private ReportStatus $status;
    private string $title;
    private array $parameters;
    private array $data;
    private int $generatedBy;
    private Carbon $createdAt;
    private ?Carbon $completedAt;

    public function __construct(
        ReportType $type,
        string $title,
        array $parameters = [],
        int $generatedBy
    ) {
        $this->type = $type;
        $this->title = $title;
        $this->parameters = $parameters;
        $this->generatedBy = $generatedBy;
        $this->status = new ReportStatus('draft');
        $this->data = [];
        $this->createdAt = Carbon::now();
        $this->completedAt = null;

        $this->id = rand(1, 1000000); // In real implementation, this would be generated by repository
    }

    public function getId(): int
    {
        return $this->id;
    }

    public function getType(): ReportType
    {
        return $this->type;
    }

    public function getStatus(): ReportStatus
    {
        return $this->status;
    }

    public function getTitle(): string
    {
        return $this->title;
    }

    public function getParameters(): array
    {
        return $this->parameters;
    }

    public function getData(): array
    {
        return $this->data;
    }

    public function getGeneratedBy(): int
    {
        return $this->generatedBy;
    }

    public function getCreatedAt(): Carbon
    {
        return $this->createdAt;
    }

    public function getCompletedAt(): ?Carbon
    {
        return $this->completedAt;
    }

    public function startGeneration(): void
    {
        if (!$this->status->equals(new ReportStatus('draft'))) {
            throw new \DomainException('Report can only be started from draft status');
        }
        $this->status = new ReportStatus('generating');
    }

    public function completeGeneration(array $data): void
    {
        if (!$this->status->equals(new ReportStatus('generating'))) {
            throw new \DomainException('Report can only be completed from generating status');
        }
        $this->data = $data;
        $this->status = new ReportStatus('completed');
        $this->completedAt = Carbon::now();
    }

    public function failGeneration(): void
    {
        if (!$this->status->equals(new ReportStatus('generating'))) {
            throw new \DomainException('Report can only fail from generating status');
        }
        $this->status = new ReportStatus('failed');
    }

    public function canBeRegenerated(): bool
    {
        return $this->status->isCompleted() || $this->status->isFailed();
    }

    public function regenerate(): void
    {
        if (!$this->canBeRegenerated()) {
            throw new \DomainException('Report cannot be regenerated in current status');
        }
        $this->status = new ReportStatus('draft');
        $this->data = [];
        $this->completedAt = null;
    }
}