<?php

namespace App\Domains\Administration\Entities;

use App\Domains\Administration\ValueObjects\SettingType;
use Carbon\Carbon;

class SystemSetting
{
    private int $id;
    private string $key;
    private $value;
    private SettingType $type;
    private string $description;
    private bool $isPublic;
    private int $createdBy;
    private int $updatedBy;
    private Carbon $createdAt;
    private Carbon $updatedAt;

    public function __construct(
        string $key,
        $value,
        SettingType $type,
        string $description,
        bool $isPublic,
        int $createdBy
    ) {
        $this->key = $key;
        $this->type = $type;
        $this->description = $description;
        $this->isPublic = $isPublic;
        $this->createdBy = $createdBy;
        $this->updatedBy = $createdBy;
        $this->createdAt = Carbon::now();
        $this->updatedAt = Carbon::now();

        $this->setValue($value);

        $this->id = rand(1, 1000000); // In real implementation, this would be generated by repository
    }

    public function getId(): int
    {
        return $this->id;
    }

    public function getKey(): string
    {
        return $this->key;
    }

    public function getValue()
    {
        return $this->value;
    }

    public function getType(): SettingType
    {
        return $this->type;
    }

    public function getDescription(): string
    {
        return $this->description;
    }

    public function isPublic(): bool
    {
        return $this->isPublic;
    }

    public function getCreatedBy(): int
    {
        return $this->createdBy;
    }

    public function getUpdatedBy(): int
    {
        return $this->updatedBy;
    }

    public function getCreatedAt(): Carbon
    {
        return $this->createdAt;
    }

    public function getUpdatedAt(): Carbon
    {
        return $this->updatedAt;
    }

    public function updateValue($value, int $updatedBy): void
    {
        $this->setValue($value);
        $this->updatedBy = $updatedBy;
        $this->updatedAt = Carbon::now();
    }

    public function updateDescription(string $description, int $updatedBy): void
    {
        $this->description = $description;
        $this->updatedBy = $updatedBy;
        $this->updatedAt = Carbon::now();
    }

    public function makePublic(int $updatedBy): void
    {
        $this->isPublic = true;
        $this->updatedBy = $updatedBy;
        $this->updatedAt = Carbon::now();
    }

    public function makePrivate(int $updatedBy): void
    {
        $this->isPublic = false;
        $this->updatedBy = $updatedBy;
        $this->updatedAt = Carbon::now();
    }

    public function canBeModifiedBy(int $userId): bool
    {
        // In a real system, this would check user permissions
        // For now, allow modification by any user
        return true;
    }

    public function getFormattedValue()
    {
        switch ($this->type->getType()) {
            case 'json':
                return json_decode($this->value, true);
            case 'array':
                return is_array($this->value) ? $this->value : json_decode($this->value, true);
            default:
                return $this->value;
        }
    }

    private function setValue($value): void
    {
        if (!$this->type->validateValue($value)) {
            throw new \InvalidArgumentException(
                'Invalid value for setting type ' . $this->type->getType()
            );
        }

        $this->value = $this->type->castValue($value);
    }
}