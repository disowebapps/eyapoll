<?php

namespace App\Domains\Administration\Entities;

use App\Domains\Administration\ValueObjects\UserRole;
use Carbon\Carbon;

class SystemUser
{
    private int $id;
    private string $email;
    private string $name;
    private UserRole $role;
    private bool $isActive;
    private int $createdBy;
    private Carbon $createdAt;
    private ?Carbon $lastLoginAt;

    public function __construct(
        string $email,
        string $name,
        UserRole $role,
        int $createdBy
    ) {
        $this->email = $email;
        $this->name = $name;
        $this->role = $role;
        $this->isActive = true;
        $this->createdBy = $createdBy;
        $this->createdAt = Carbon::now();
        $this->lastLoginAt = null;

        $this->validateEmail($email);

        $this->id = rand(1, 1000000); // In real implementation, this would be generated by repository
    }

    public function getId(): int
    {
        return $this->id;
    }

    public function getEmail(): string
    {
        return $this->email;
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function getRole(): UserRole
    {
        return $this->role;
    }

    public function isActive(): bool
    {
        return $this->isActive;
    }

    public function getCreatedBy(): int
    {
        return $this->createdBy;
    }

    public function getCreatedAt(): Carbon
    {
        return $this->createdAt;
    }

    public function getLastLoginAt(): ?Carbon
    {
        return $this->lastLoginAt;
    }

    public function updateRole(UserRole $newRole, int $updatedBy): void
    {
        if (!$this->canBeModifiedBy($updatedBy)) {
            throw new \DomainException('Insufficient permissions to update user role');
        }

        $this->role = $newRole;
    }

    public function deactivate(): void
    {
        $this->isActive = false;
    }

    public function activate(): void
    {
        $this->isActive = true;
    }

    public function recordLogin(): void
    {
        $this->lastLoginAt = Carbon::now();
    }

    public function updateProfile(string $name, string $email): void
    {
        if (!empty($name)) {
            $this->name = $name;
        }

        if (!empty($email) && $email !== $this->email) {
            $this->validateEmail($email);
            $this->email = $email;
        }
    }

    public function hasPermission(string $permission): bool
    {
        return $this->isActive && $this->role->hasPermission($permission);
    }

    public function canManageUser(SystemUser $otherUser): bool
    {
        if (!$this->isActive) {
            return false;
        }

        // Admins can manage everyone
        if ($this->role->isAdmin()) {
            return true;
        }

        // Moderators can manage non-admin users
        if ($this->role->isModerator() && !$otherUser->getRole()->isAdmin()) {
            return true;
        }

        return false;
    }

    public function canBeModifiedBy(int $userId): bool
    {
        // Users can modify themselves
        if ($this->id === $userId) {
            return true;
        }

        // Admins can modify anyone
        // This would need to be checked against the actual user making the request
        // For now, we'll assume the check is done at the application service level
        return true;
    }

    private function validateEmail(string $email): void
    {
        if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
            throw new \InvalidArgumentException('Invalid email format');
        }
    }
}