<?php

namespace App\Domains\Elections\Entities;

use App\Domains\Elections\ValueObjects\ElectionStatus;
use Carbon\Carbon;

class Election
{
    private int $id;
    private string $title;
    private string $description;
    private ElectionStatus $status;
    private Carbon $startDate;
    private Carbon $endDate;
    private int $createdBy;
    private Carbon $createdAt;
    private ?Carbon $announcedAt;
    private ?Carbon $completedAt;

    public function __construct(
        string $title,
        string $description,
        Carbon $startDate,
        Carbon $endDate,
        int $createdBy
    ) {
        $this->title = $title;
        $this->description = $description;
        $this->startDate = $startDate;
        $this->endDate = $endDate;
        $this->createdBy = $createdBy;
        $this->status = new ElectionStatus('draft');
        $this->createdAt = Carbon::now();
        $this->announcedAt = null;
        $this->completedAt = null;

        $this->validateDates();

        $this->id = rand(1, 1000000); // In real implementation, this would be generated by repository
    }

    public function getId(): int
    {
        return $this->id;
    }

    public function getTitle(): string
    {
        return $this->title;
    }

    public function getDescription(): string
    {
        return $this->description;
    }

    public function getStatus(): ElectionStatus
    {
        return $this->status;
    }

    public function getStartDate(): Carbon
    {
        return $this->startDate;
    }

    public function getEndDate(): Carbon
    {
        return $this->endDate;
    }

    public function getCreatedBy(): int
    {
        return $this->createdBy;
    }

    public function getCreatedAt(): Carbon
    {
        return $this->createdAt;
    }

    public function getAnnouncedAt(): ?Carbon
    {
        return $this->announcedAt;
    }

    public function getCompletedAt(): ?Carbon
    {
        return $this->completedAt;
    }

    public function announce(): void
    {
        if (!$this->status->equals(new ElectionStatus('draft'))) {
            throw new \DomainException('Election can only be announced from draft status');
        }
        $this->status = new ElectionStatus('announced');
        $this->announcedAt = Carbon::now();
    }

    public function start(): void
    {
        if (!$this->status->equals(new ElectionStatus('announced'))) {
            throw new \DomainException('Election can only be started from announced status');
        }
        $this->status = new ElectionStatus('active');
    }

    public function complete(): void
    {
        if (!$this->status->equals(new ElectionStatus('active'))) {
            throw new \DomainException('Election can only be completed from active status');
        }
        $this->status = new ElectionStatus('completed');
        $this->completedAt = Carbon::now();
    }

    public function cancel(): void
    {
        if ($this->status->equals(new ElectionStatus('completed'))) {
            throw new \DomainException('Cannot cancel a completed election');
        }
        $this->status = new ElectionStatus('cancelled');
    }

    public function isActive(): bool
    {
        return $this->status->isActive();
    }

    public function isCompleted(): bool
    {
        return $this->status->isCompleted();
    }

    public function canBeModified(): bool
    {
        return $this->status->equals(new ElectionStatus('draft'));
    }

    private function validateDates(): void
    {
        if ($this->startDate->isPast()) {
            throw new \InvalidArgumentException('Election start date cannot be in the past');
        }

        if ($this->endDate->isBefore($this->startDate)) {
            throw new \InvalidArgumentException('Election end date must be after start date');
        }

        if ($this->startDate->diffInHours($this->endDate) < 1) {
            throw new \InvalidArgumentException('Election must last at least 1 hour');
        }
    }
}