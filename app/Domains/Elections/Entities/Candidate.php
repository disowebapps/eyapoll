<?php

namespace App\Domains\Elections\Entities;

use App\Domains\Elections\ValueObjects\PositionType;

class Candidate
{
    private int $id;
    private int $electionId;
    private int $userId;
    private PositionType $position;
    private string $manifesto;
    private bool $isApproved;
    private int $approvedBy;
    private \Carbon\Carbon $appliedAt;
    private ?\Carbon\Carbon $approvedAt;

    public function __construct(
        int $electionId,
        int $userId,
        PositionType $position,
        string $manifesto
    ) {
        $this->electionId = $electionId;
        $this->userId = $userId;
        $this->position = $position;
        $this->manifesto = $manifesto;
        $this->isApproved = false;
        $this->approvedBy = 0;
        $this->appliedAt = \Carbon\Carbon::now();
        $this->approvedAt = null;

        $this->id = rand(1, 1000000); // In real implementation, this would be generated by repository
    }

    public function getId(): int
    {
        return $this->id;
    }

    public function getElectionId(): int
    {
        return $this->electionId;
    }

    public function getUserId(): int
    {
        return $this->userId;
    }

    public function getPosition(): PositionType
    {
        return $this->position;
    }

    public function getManifesto(): string
    {
        return $this->manifesto;
    }

    public function isApproved(): bool
    {
        return $this->isApproved;
    }

    public function getApprovedBy(): int
    {
        return $this->approvedBy;
    }

    public function getAppliedAt(): \Carbon\Carbon
    {
        return $this->appliedAt;
    }

    public function getApprovedAt(): ?\Carbon\Carbon
    {
        return $this->approvedAt;
    }

    public function approve(int $approvedBy): void
    {
        if ($this->isApproved) {
            throw new \DomainException('Candidate is already approved');
        }

        $this->isApproved = true;
        $this->approvedBy = $approvedBy;
        $this->approvedAt = \Carbon\Carbon::now();
    }

    public function reject(): void
    {
        if ($this->isApproved) {
            throw new \DomainException('Cannot reject an approved candidate');
        }

        // In a real implementation, this might mark as rejected
        // For now, we'll just leave it as not approved
    }

    public function updateManifesto(string $manifesto): void
    {
        if ($this->isApproved) {
            throw new \DomainException('Cannot update manifesto for approved candidate');
        }

        $this->manifesto = $manifesto;
    }

    public function canBeModified(): bool
    {
        return !$this->isApproved;
    }
}